* Down
  The main aim is to download large files over proxies that have a cap
  on maximum size of a file that can be downloaded.  This is
  accomplished downloading files part-by-part, i.e., at once, we are
  downloading a file of size smaller than the maximum allowed.  Once
  all the parts are downloaded, these could be combined to get the
  original file.
* Usage
  + You need to have Haskell compiler installed.
  + Execute the comman ~ghc --make -O2 -threaded down.hs~ to generate
    the binary file ~down~.
  + To download ~example.com/example.iso~, execute ~./down
    example.com/example.iso~. After completion the downloaded file
    will have the name ~file~.  The download runs silently (no info
    will be shown.)
        
* What next?
** TODO Native curl library
   Haskell has a curl library implementation.  Currently, the project
   makes use of curl system calls to do the downloading and other
   stuff.  As a modification, the curl library (implemented by Galios
   Inc) could be used instead of the system calls.
** TODO Support for resume
   If ~Ctrl-C~ is pressed, the download stops.  But when the download
   is restarted, it simply ignores the already downloaded parts (or
   parts within parts.)  Somehow, this has to be plugged.
** DONE Support for parallel downloads
   CLOSED: [2015-10-12 Mon 18:30]
   Currently, the program downloads the file one by one.  There is no
   harm in doing this in parallel.
** DONE Filename
   CLOSED: [2015-10-12 Mon 17:53]
   Currently, the file name static; need to make it better.
** TODO Status of the download
   Parallelism created problems with output of the curl program.  Need
   to somehow fix this. 
* Status
  + [X] Filename.
  + [X] Parallel IO (support for parallel downloads.)
  + [ ] Native Curl Library.
  + [ ] Support for resume (don't know.)
  + [ ] Current Status of download
